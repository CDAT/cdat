version: 2

aliases:
  - &setup_miniconda
    name: setup_miniconda
    command: |
       mkdir -p $WORKDIR
       python scripts/install_miniconda.py -w $WORKDIR -p $PYTHON_VERSION
       echo "export PATH=$WORKDIR/miniconda/bin:\$PATH" >> ~/.bashrc
       source ~/.bashrc

  - &prep_conda_cache
    name: prep_conda_cache
    command: |
       mv $WORKDIR/miniconda miniconda

  - &get_conda_cache
    name: get_conda_cache
    command: |
       mkdir -p $WORKDIR
       mv miniconda $WORKDIR/
       export PATH=$WORKDIR/miniconda/bin:$PATH
       conda config --set always_yes yes --set changeps1 no
       conda update -y -q conda
       conda config --set anaconda_upload no
 
  - &setup_nightly
    name: setup_nightly
    command: |
      python scripts/install_nightly.py -w $WORKDIR -p $PYTHON_VERSION
      ls $WORKDIR/miniconda/envs
    no_output_timeout: 30m

  - &install_from_yaml_file
    name: install_from_yaml_file
    command: |
      mkdir -p $WORKDIR
      python scripts/install_from_env.py -w $WORKDIR -v $ENV_PREFIX -p $PYTHON_VERSION
      ls $WORKDIR/miniconda/envs
    no_output_timeout: 30m

  - &install_from_conda_channel
    name: install_from_conda_channel
    command: |
      mkdir -p $WORKDIR
      python scripts/install_from_channel.py -w $WORKDIR -v $ENV_PREFIX -p $PYTHON_VERSION -c $LABEL
      ls $WORKDIR/miniconda/envs
    no_output_timeout: 30m

  - &validate_install
    name: validate_install
    command: |
      python scripts/validate_nightly_install.py -w $WORKDIR -v $ENV_PREFIX -p $PYTHON_VERSION -b $BRANCH -l $LABEL
    no_output_timeout: 30m

  - &run_cdms_test
    name: run_cdms_test
    command: |
      python $RUN_TESTSUITE -w $WORKDIR -p $PYTHON_VERSION -t 'cdms' -v $ENV_PREFIX -b $BRANCH -l $CDMS_LABEL
    no_output_timeout: 30m

  - &run_genutil_test
    name: run_genutil_test
    command: | 
      python $RUN_TESTSUITE -w $WORKDIR -p $PYTHON_VERSION -t 'genutil' -v $ENV_PREFIX -b $BRANCH -l $LABEL

  - &run_cdutil_test
    name: run_cdutil_test
    command: | 
      python $RUN_TESTSUITE -w $WORKDIR -p $PYTHON_VERSION -t 'cdutil' -v $ENV_PREFIX -b $BRANCH -l $LABEL

  - &run_vcs_test
    name: run_vcs_test
    command: | 
      python $RUN_TESTSUITE -w $WORKDIR -p $PYTHON_VERSION -t 'vcs' -v $ENV_PREFIX -b $BRANCH -l $LABEL
    no_output_timeout: 30m

  - &run_vcsaddons_test
    name: run_vcsaddons_test
    command: | 
      python $RUN_TESTSUITE -w $WORKDIR -p $PYTHON_VERSION -t 'vcsaddons' -v $ENV_PREFIX -b $BRANCH -l $LABEL

  - &run_pcmdi_metrics_test
    name: run_pcmdi_metrics_test
    command: | 
      python $RUN_TESTSUITE -w $WORKDIR -p $PYTHON_VERSION -t 'pcmdi_metrics' -v $ENV_PREFIX -b $BRANCH -l $PCMDI_METRICS_LABEL

  - &run_dv3d_test
    name: run_dv3d_test
    command: |
      python $RUN_TESTSUITE -w $WORKDIR -p $PYTHON_VERSION -t 'dv3d' -v $ENV_PREFIX -b $BRANCH -l $LABEL
    no_output_timeout: 30m

  - &run_thermo_test
    name: run_thermo_test
    command: |
      python $RUN_TESTSUITE -w $WORKDIR -p $PYTHON_VERSION -t 'thermo' -v $ENV_PREFIX -b $BRANCH -l $LABEL

  - &run_wk_test
    name: run_wk_test
    command: |
      python $RUN_TESTSUITE -w $WORKDIR -p $PYTHON_VERSION -t 'wk' -v $ENV_PREFIX -b $BRANCH -l $LABEL

  - &prep_artifacts
    name: prep_artifacts
    command: |
      for ts in 'genutil' 'cdutil' 'vcs' 'vcsaddons' 'dv3d' 'thermo' 'wk' 'cdms' 'pcmdi_metrics'
      do
        if [ "$(ls -A $WORKDIR/$ts/tests_html)" ]; then
           mkdir -p $CIRCLE_JOB/$ts-tests_html  
           cp -r $WORKDIR/$ts/tests_html/* $CIRCLE_JOB/$ts-tests_html    
        fi
      done

      for ts in 'vcs' 'vcsaddons' 'pcmdi_metrics' 'thermo' 'wk' 'pcmdi_metrics'
      do
        if [ "$(ls -A $WORKDIR/$ts/tests_png)" ]; then
           mkdir -p $CIRCLE_JOB/$ts-tests_png 
           cp -r $WORKDIR/$ts/tests_png/* $CIRCLE_JOB/$ts-tests_png    
        fi
      done

      # for installing cdat from latest channel, save the output of "conda env export"
      if [ $CIRCLE_JOB == *"latest"* ]; then
         cp $WORKDIR/${ENV_PREFIX}_${PYTHON_VERSION}_env.yaml env.yaml
      fi

jobs:
  get_time_stamp:
    environment:
      WORKDIR: /Users/distiller/project/workdir
    macos:
      xcode: "9.2.0"
    steps:
      - run: date '+%Y-%m-%d' > todaysDate.txt
      - persist_to_workspace:
          root: .
          paths: todaysDate.txt

  macos_py2_miniconda:
    macos:
      xcode: "9.2.0"
    environment:
      WORKDIR: /Users/distiller/project/workdir
      PYTHON_VERSION: py2
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: *setup_miniconda
      - run: *prep_conda_cache
      - save_cache:
          key: macos_py2_conda_V101-{{ checksum "todaysDate.txt" }}
          paths: miniconda

  macos_py3_miniconda:
    macos:
      xcode: "9.2.0"
    environment:
      WORKDIR: /Users/distiller/project/workdir
      PYTHON_VERSION: py3
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: *setup_miniconda
      - run: *prep_conda_cache
      - save_cache:
          key: macos_py3_conda_V101-{{ checksum "todaysDate.txt" }}
          paths: miniconda

  linux_py2_miniconda:
    machine:
      image: circleci/classic:latest
    environment:
      WORKDIR: /home/circleci/project/workdir
      PYTHON_VERSION: py2
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: *setup_miniconda
      - run: *prep_conda_cache
      - save_cache:
          key: linux_py2_conda_V101-{{ checksum "todaysDate.txt" }}
          paths: miniconda

  linux_py3_miniconda:
    machine:
      image: circleci/classic:latest
    environment:
      WORKDIR: /home/circleci/project/workdir
      PYTHON_VERSION: py3
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: *setup_miniconda
      - run: *prep_conda_cache
      - save_cache:
          key: linux_py3_conda_V101-{{ checksum "todaysDate.txt" }}
          paths: miniconda

  centos_py2_miniconda:
    docker:
      - image: muryanto1/mycentos:latest
    working_directory: workspace
    environment:
      WORKDIR: /workspace/workdir
      PYTHON_VERSION: 'py2'
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: *setup_miniconda
      - run: *prep_conda_cache
      - save_cache:
          key: centos_py2_conda_V101-{{ checksum "todaysDate.txt" }}
          paths: miniconda

  centos_py3_miniconda:
    docker:
      - image: muryanto1/mycentos:latest
    working_directory: workspace
    environment:
      WORKDIR: /workspace/workdir
      PYTHON_VERSION: 'py3'
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: *setup_miniconda
      - run: *prep_conda_cache
      - save_cache:
          key: centos_py3_conda_V101-{{ checksum "todaysDate.txt" }}
          paths: miniconda

  #
  # nightly builds
  #
  centos_nightly_py2:
    docker:
      - image: muryanto1/mycentos:latest
    working_directory: workspace
    environment:
      WORKDIR: /workspace/workdir
      PYTHON_VERSION: py2
      BRANCH: master
      ENV_PREFIX: nightly
      LABEL: master
      CDMS_LABEL: master
      PCMDI_METRICS_LABEL: master
      RUN_TESTSUITE: scripts/run_testsuite.py
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - centos_py2_conda_V101-{{ checksum "todaysDate.txt" }}
      - run: *get_conda_cache
      - run: *setup_nightly
      - run: *validate_install
      - run: *run_cdms_test
      - run: *run_genutil_test
      - run: *run_cdutil_test
      - run: *run_vcs_test
      - run: *run_vcsaddons_test
      - run: *run_pcmdi_metrics_test
      - run: *run_dv3d_test
      - run: *run_thermo_test
      - run: *run_wk_test
      - run: *prep_artifacts
      - store_artifacts:
           path: centos_nightly_py2
           destination: centos_nightly_py2
      - persist_to_workspace:
          root: .
          paths:
            - centos_nightly_py2

  centos_nightly_py3:
    docker:
      - image: muryanto1/mycentos:latest
    working_directory: workspace
    environment:
      WORKDIR: /workspace/workdir
      PYTHON_VERSION: py3
      BRANCH: master
      ENV_PREFIX: nightly
      LABEL: master
      CDMS_LABEL: master
      PCMDI_METRICS_LABEL: master
      RUN_TESTSUITE: scripts/run_testsuite.py
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - centos_py3_conda_V101-{{ checksum "todaysDate.txt" }}
      - run: *get_conda_cache
      - run: *setup_nightly
      - run: *validate_install
      - run: *run_cdms_test
      - run: *run_genutil_test
      - run: *run_cdutil_test
      - run: *run_vcs_test
      - run: *run_vcsaddons_test
      - run: *run_pcmdi_metrics_test
      - run: *run_dv3d_test
      - run: *run_thermo_test
      - run: *run_wk_test
      - run: *prep_artifacts
      - store_artifacts:
           path: centos_nightly_py3
           destination: centos_nightly_py3
      - persist_to_workspace:
          root: .
          paths:
            - centos_nightly_py3
 
  macos_nightly_py2:
    macos:
      xcode: "9.2.0"
    environment:
      WORKDIR: /Users/distiller/project/workdir
      PYTHON_VERSION: py2
      BRANCH: master
      ENV_PREFIX: nightly
      LABEL: master
      CDMS_LABEL: master
      PCMDI_METRICS_LABEL: master
      RUN_TESTSUITE: scripts/run_testsuite.py
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - macos_py2_conda_V101-{{ checksum "todaysDate.txt" }}
      - run: *get_conda_cache
      - run: *setup_nightly
      - run: *validate_install
      - run: *run_cdms_test
      - run: *run_genutil_test
      - run: *run_cdutil_test
      - run: *run_vcs_test
      - run: *run_vcsaddons_test
      - run: *run_dv3d_test
      - run: *run_thermo_test
      - run: *run_wk_test
      - run: *prep_artifacts
      - store_artifacts:
           path: macos_nightly_py2
           destination: macos_nightly_py2
      - persist_to_workspace:
          root: .
          paths:
            - macos_nightly_py2

  macos_nightly_py3:
    macos:
      xcode: "9.2.0"
    environment:
      WORKDIR: /Users/distiller/project/workdir
      PYTHON_VERSION: py3
      BRANCH: master
      ENV_PREFIX: nightly
      LABEL: master
      CDMS_LABEL: master
      PCMDI_METRICS_LABEL: master
      RUN_TESTSUITE: scripts/run_testsuite.py
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - macos_py3_conda_V101-{{ checksum "todaysDate.txt" }}
      - run: *get_conda_cache
      - run: *setup_nightly
      - run: *validate_install
      - run: *run_cdms_test
      - run: *run_genutil_test
      - run: *run_cdutil_test
      - run: *run_vcs_test
      - run: *run_vcsaddons_test
      - run: *run_dv3d_test
      - run: *run_thermo_test
      - run: *run_wk_test
      - run: *prep_artifacts
      - store_artifacts:
           path: macos_nightly_py3
           destination: macos_nightly_py3
      - persist_to_workspace:
          root: .
          paths: 
            - macos_nightly_py3

  linux_nightly_py2:
    machine:
      image: circleci/classic:latest
    environment:
      WORKDIR: /home/circleci/project/workdir
      PYTHON_VERSION: py2
      BRANCH: master
      ENV_PREFIX: nightly
      LABEL: master
      CDMS_LABEL: master
      PCMDI_METRICS_LABEL: master
      RUN_TESTSUITE: scripts/run_testsuite.py
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - linux_py2_conda_V101-{{ checksum "todaysDate.txt" }}
      - run: *get_conda_cache
      - run: *setup_nightly
      - run: *validate_install
      - run: *run_cdms_test
      - run: *run_genutil_test
      - run: *run_cdutil_test
      - run: *run_vcs_test
      - run: *run_vcsaddons_test
      - run: *run_pcmdi_metrics_test
      - run: *run_dv3d_test
      - run: *run_thermo_test
      - run: *run_wk_test
      - run: *prep_artifacts
      - store_artifacts:
           path: linux_nightly_py2
           destination: linux_nightly_py2
      - persist_to_workspace:
          root: .
          paths:
            - linux_nightly_py2

  linux_nightly_py3:
    machine:
      image: circleci/classic:latest
    environment:
      WORKDIR: /home/circleci/project/workdir
      PYTHON_VERSION: py3
      BRANCH: master
      ENV_PREFIX: nightly
      LABEL: master
      CDMS_LABEL: master
      PCMDI_METRICS_LABEL: master
      RUN_TESTSUITE: scripts/run_testsuite.py
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - linux_py3_conda_V101-{{ checksum "todaysDate.txt" }}
      - run: *get_conda_cache
      - run: *setup_nightly
      - run: *validate_install
      - run: *run_cdms_test
      - run: *run_genutil_test
      - run: *run_cdutil_test
      - run: *run_vcs_test
      - run: *run_vcsaddons_test
      - run: *run_pcmdi_metrics_test
      - run: *run_dv3d_test
      - run: *run_thermo_test
      - run: *run_wk_test
      - run: *prep_artifacts
      - store_artifacts:
           path: linux_nightly_py3
           destination: linux_nightly_py3
      - persist_to_workspace:
          root: .
          paths:
            - linux_nightly_py3

  #
  # install from cdat v80 + latest hannel
  #
  macos_cdat_v80_latest_channel_py2:
    macos:
      xcode: "9.2.0"
    environment:
      WORKDIR: /Users/distiller/project/workdir
      PYTHON_VERSION: py2
      ENV_PREFIX: cdat_v80_latest_channel
      BRANCH: master
      LABEL: v8.0
      CDMS_LABEL: v3.0.1
      PCMDI_METRICS_LABEL: cdat_v8.0
      RUN_TESTSUITE: scripts/run_testsuite.py
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - macos_py2_conda_V101-{{ checksum "todaysDate.txt" }}
      - run: *get_conda_cache
      - run: *install_from_conda_channel
      - run: *run_cdms_test
      - run: *run_genutil_test
      - run: *run_cdutil_test
      - run: *run_vcs_test
      - run: *run_vcsaddons_test
      - run: *run_dv3d_test
      - run: *run_thermo_test
      - run: *run_wk_test
      - run: *prep_artifacts
      - store_artifacts:
           path: macos_cdat_v80_latest_channel_py2
           destination: macos_cdat_v80_latest_channel_py2
      - store_artifacts:
           path: env.yaml
           destination: env.yaml
      - persist_to_workspace:
          root: .
          paths:
            - macos_cdat_v80_latest_channel_py2

  linux_cdat_v80_latest_channel_py2:
    machine:
      image: circleci/classic:latest
    environment:
      WORKDIR: /home/circleci/project/workdir
      PYTHON_VERSION: py2
      ENV_PREFIX: cdat_v80_latest_channel
      BRANCH: master
      LABEL: v8.0
      CDMS_LABEL: v3.0.1
      PCMDI_METRICS_LABEL: cdat_v8.0
      RUN_TESTSUITE: scripts/run_testsuite.py
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - linux_py2_conda_V101-{{ checksum "todaysDate.txt" }}
      - run: *get_conda_cache
      - run: *install_from_conda_channel
      - run: *run_cdms_test
      - run: *run_genutil_test
      - run: *run_cdutil_test
      - run: *run_vcs_test
      - run: *run_vcsaddons_test
      - run: *run_pcmdi_metrics_test
      - run: *run_dv3d_test
      - run: *run_thermo_test
      - run: *run_wk_test
      - run: *prep_artifacts
      - store_artifacts:
           path: linux_cdat_v80_latest_channel_py2
           destination: linux_cdat_v80_latest_channel_py2
      - store_artifacts:
           path: env.yaml
           destination: env.yaml
      - persist_to_workspace:
          root: .
          paths:
            - linux_cdat_v80_latest_channel_py2

  macos_cdat_v80_latest_channel_py3:
    macos:
      xcode: "9.2.0"
    environment:
      WORKDIR: /Users/distiller/project/workdir
      PYTHON_VERSION: py3
      ENV_PREFIX: cdat_v80_latest_channel
      BRANCH: master
      LABEL: v8.0
      CDMS_LABEL: v3.0.1
      PCMDI_METRICS_LABEL: cdat_v8.0
      RUN_TESTSUITE: scripts/run_testsuite.py
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - macos_py3_conda_V101-{{ checksum "todaysDate.txt" }}
      - run: *get_conda_cache
      - run: *install_from_conda_channel
      - run: *run_cdms_test
      - run: *run_genutil_test
      - run: *run_cdutil_test
      - run: *run_vcs_test
      - run: *run_vcsaddons_test
      - run: *run_dv3d_test
      - run: *run_thermo_test
      - run: *run_wk_test
      - run: *prep_artifacts
      - store_artifacts:
           path: macos_cdat_v80_latest_channel_py3
           destination: macos_cdat_v80_latest_channel_py3
      - store_artifacts:
           path: env.yaml
           destination: env.yaml
      - persist_to_workspace:
          root: .
          paths:
            - macos_cdat_v80_latest_channel_py3

  linux_cdat_v80_latest_channel_py3:
    machine:
      image: circleci/classic:latest
    environment:
      WORKDIR: /home/circleci/project/workdir
      PYTHON_VERSION: py3
      ENV_PREFIX: cdat_v80_latest_channel
      BRANCH: master
      LABEL: v8.0
      CDMS_LABEL: v3.0.1
      PCMDI_METRICS_LABEL: cdat_v8.0
      RUN_TESTSUITE: scripts/run_testsuite.py
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - linux_py3_conda_V101-{{ checksum "todaysDate.txt" }}
      - run: *get_conda_cache
      - run: *install_from_conda_channel
      - run: *run_cdms_test
      - run: *run_genutil_test
      - run: *run_cdutil_test
      - run: *run_vcs_test
      - run: *run_vcsaddons_test
      - run: *run_pcmdi_metrics_test
      - run: *run_dv3d_test
      - run: *run_thermo_test
      - run: *run_wk_test
      - run: *prep_artifacts
      - store_artifacts:
           path: linux_cdat_v80_latest_channel_py3
           destination: linux_cdat_v80_latest_channel_py3
      - store_artifacts:
           path: env.yaml
           destination: env.yaml
      - persist_to_workspace:
          root: .
          paths:
            - linux_cdat_v80_latest_channel_py3

  #
  # install from cdat-v80* yaml files
  #
  macos_cdat-v80-nox_py2:
    macos:
      xcode: "9.2.0"
    environment:
      WORKDIR: /Users/distiller/project/workdir
      PYTHON_VERSION: py2
      ENV_PREFIX: cdat-v80-nox
      BRANCH: master
      LABEL: v8.0
      CDMS_LABEL: v3.0.1
      PCMDI_METRICS_LABEL: cdat_v8.0
      RUN_TESTSUITE: scripts/run_testsuite.py
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - macos_py2_conda_V101-{{ checksum "todaysDate.txt" }}
      - run: *get_conda_cache
      - run: *install_from_yaml_file
      - run: *run_cdms_test
      - run: *run_genutil_test
      - run: *run_cdutil_test
      - run: *run_vcs_test
      - run: *run_vcsaddons_test
      - run: *run_dv3d_test
      - run: *run_thermo_test
      - run: *run_wk_test
      - run: *prep_artifacts
      - store_artifacts:
           path: macos_cdat-v80-nox_py2
           destination: macos_cdat-v80-nox_py2
      - persist_to_workspace:
          root: .
          paths:
            - macos_cdat-v80-nox_py2

  macos_cdat-v80-nox_py3:
    macos:
      xcode: "9.2.0"
    environment:
      WORKDIR: /Users/distiller/project/workdir
      PYTHON_VERSION: py3
      ENV_PREFIX: cdat-v80-nox
      BRANCH: master
      LABEL: v8.0
      CDMS_LABEL: v3.0.1
      PCMDI_METRICS_LABEL: cdat_v8.0
      RUN_TESTSUITE: scripts/run_testsuite.py
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - macos_py3_conda_V101-{{ checksum "todaysDate.txt" }}
      - run: *get_conda_cache
      - run: *install_from_yaml_file
      - run: *run_cdms_test
      - run: *run_genutil_test
      - run: *run_cdutil_test
      - run: *run_vcs_test
      - run: *run_vcsaddons_test
      - run: *run_dv3d_test
      - run: *run_thermo_test
      - run: *run_wk_test
      - run: *prep_artifacts
      - store_artifacts:
           path: macos_cdat-v80-nox_py3
           destination: macos_cdat-v80-nox_py3
      - persist_to_workspace:
          root: .
          paths:
            - macos_cdat-v80-nox_py3

  macos_cdat-v80_py2:
    macos:
      xcode: "9.2.0"
    environment:
      WORKDIR: /Users/distiller/project/workdir
      PYTHON_VERSION: py2
      ENV_PREFIX: cdat-v80
      BRANCH: master
      LABEL: v8.0
      CDMS_LABEL: v3.0.1
      PCMDI_METRICS_LABEL: cdat_v8.0
      RUN_TESTSUITE: scripts/run_testsuite.py
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - macos_py2_conda_V101-{{ checksum "todaysDate.txt" }}
      - run: *get_conda_cache
      - run: *install_from_yaml_file
      - run: *run_cdms_test
      - run: *run_genutil_test
      - run: *run_cdutil_test
      - run: *prep_artifacts
      - store_artifacts:
           path: macos_cdat-v80_py2
           destination: macos_cdat-v80_py2
      - persist_to_workspace:
          root: .
          paths:
            - macos_cdat-v80_py2

  macos_cdat-v80_py3:
    macos:
      xcode: "9.2.0"
    environment:
      WORKDIR: /Users/distiller/project/workdir
      PYTHON_VERSION: py3
      ENV_PREFIX: cdat-v80
      BRANCH: master
      LABEL: v8.0
      CDMS_LABEL: v3.0.1
      PCMDI_METRICS_LABEL: cdat_v8.0
      RUN_TESTSUITE: scripts/run_testsuite.py
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - macos_py3_conda_V101-{{ checksum "todaysDate.txt" }}
      - run: *get_conda_cache
      - run: *install_from_yaml_file
      - run: *run_cdms_test
      - run: *run_genutil_test
      - run: *run_cdutil_test
      - run: *prep_artifacts
      - store_artifacts:
           path: macos_cdat-v80_py3
           destination: macos_cdat-v80_py3
      - persist_to_workspace:
          root: .
          paths:
            - macos_cdat-v80_py3

  linux_cdat-v80-nox_py2:
    machine:
      image: circleci/classic:latest
    environment:
      WORKDIR: /home/circleci/project/workdir
      PYTHON_VERSION: py2
      ENV_PREFIX: cdat-v80-nox
      BRANCH: master
      LABEL: v8.0
      CDMS_LABEL: v3.0.1
      PCMDI_METRICS_LABEL: cdat_v8.0
      RUN_TESTSUITE: scripts/run_testsuite.py
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - linux_py2_conda_V101-{{ checksum "todaysDate.txt" }}
      - run: *get_conda_cache
      - run: *install_from_yaml_file
      - run: *run_cdms_test
      - run: *run_genutil_test
      - run: *run_cdutil_test
      - run: *run_vcs_test
      - run: *run_vcsaddons_test
      - run: *run_pcmdi_metrics_test
      - run: *run_dv3d_test
      - run: *run_thermo_test
      - run: *run_wk_test
      - run: *prep_artifacts
      - store_artifacts:
           path: linux_cdat-v80-nox_py2
           destination: linux_cdat-v80-nox_py2
      - persist_to_workspace:
          root: .
          paths:
            - linux_cdat-v80-nox_py2

  linux_cdat-v80-nox_py3:
    machine:
      image: circleci/classic:latest
    environment:
      WORKDIR: /home/circleci/project/workdir
      PYTHON_VERSION: py3
      ENV_PREFIX: cdat-v80-nox
      BRANCH: master
      LABEL: v8.0
      CDMS_LABEL: v3.0.1
      PCMDI_METRICS_LABEL: cdat_v8.0
      RUN_TESTSUITE: scripts/run_testsuite.py
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - linux_py3_conda_V101-{{ checksum "todaysDate.txt" }}
      - run: *get_conda_cache
      - run: *install_from_yaml_file
      - run: *run_cdms_test
      - run: *run_genutil_test
      - run: *run_cdutil_test
      - run: *run_vcs_test
      - run: *run_vcsaddons_test
      - run: *run_pcmdi_metrics_test
      - run: *run_dv3d_test
      - run: *run_thermo_test
      - run: *run_wk_test
      - run: *prep_artifacts
      - store_artifacts:
           path: linux_cdat-v80-nox_py3
           destination: linux_cdat-v80-nox_py3
      - persist_to_workspace:
          root: .
          paths:
            - linux_cdat-v80-nox_py3

  linux_cdat-v80_py2:
    machine:
      image: circleci/classic:latest
    environment:
      WORKDIR: /home/circleci/project/workdir
      PYTHON_VERSION: py2
      ENV_PREFIX: cdat-v80
      BRANCH: master
      LABEL: v8.0
      CDMS_LABEL: v3.0.1
      PCMDI_METRICS_LABEL: cdat_v8.0
      RUN_TESTSUITE: scripts/run_testsuite.py
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - linux_py2_conda_V101-{{ checksum "todaysDate.txt" }}
      - run: *get_conda_cache
      - run: *install_from_yaml_file
      - run: *run_cdms_test
      - run: *run_genutil_test
      - run: *run_cdutil_test
      - run: *prep_artifacts
      - store_artifacts:
           path: linux_cdat-v80_py2
           destination: linux_cdat-v80_py2
      - persist_to_workspace:
          root: .
          paths:
            - linux_cdat-v80_py2

  linux_cdat-v80_py3:
    machine:
      image: circleci/classic:latest
    environment:
      WORKDIR: /home/circleci/project/workdir
      PYTHON_VERSION: py3
      ENV_PREFIX: cdat-v80
      BRANCH: master
      LABEL: v8.0
      CDMS_LABEL: v3.0.1
      PCMDI_METRICS_LABEL: cdat_v8.0
      RUN_TESTSUITE: scripts/run_testsuite.py
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - linux_py3_conda_V101-{{ checksum "todaysDate.txt" }}
      - run: *get_conda_cache
      - run: *install_from_yaml_file
      - run: *run_cdms_test
      - run: *run_genutil_test
      - run: *run_cdutil_test
      - run: *prep_artifacts
      - store_artifacts:
           path: linux_cdat-v80_py3
           destination: linux_cdat-v80_py3
      - persist_to_workspace:
          root: .
          paths:
            - linux_cdat-v80_py3

  collect_nightlies_test_results:
    machine:
      image: circleci/classic:latest
    steps:
      - attach_workspace:
          at: .
      #- store_artifacts:
      #     path: centos_nightly_py2
      #     destination: centos_nightly_py2
      #- store_artifacts:
      #     path: centos_nightly_py3
      #     destination: centos_nightly_py3
      - store_artifacts:
           path: macos_nightly_py2
           destination: macos_nightly_py2
      - store_artifacts:
           path: macos_nightly_py3
           destination: macos_nightly_py3
      - store_artifacts:
           path: linux_nightly_py2
           destination: linux_nightly_py2
      - store_artifacts:
           path: linux_nightly_py3
           destination: linux_nightly_py3

  collect_channels_test_results:
    machine:
      image: circleci/classic:latest
    steps:
      - attach_workspace:
          at: .
      - store_artifacts:
           path: macos_cdat_v80_latest_channel_py2
           destination: macos_cdat_v80_latest_channel_py2
      - store_artifacts:
           path: linux_cdat_v80_latest_channel_py2
           destination: linux_cdat_v80_latest_channel_py2
      - store_artifacts:
           path: macos_cdat_v80_latest_channel_py3
           destination: macos_cdat_v80_latest_channel_py3
      - store_artifacts:
           path: linux_cdat_v80_latest_channel_py3
           destination: linux_cdat_v80_latest_channel_py3

  collect_yamls_test_results:
    machine:
      image: circleci/classic:latest
    steps:
      - attach_workspace:
          at: .
      - store_artifacts:
           path: macos_cdat-v80-nox_py2
           destination: macos_cdat-v80-nox_py2
      - store_artifacts:
           path: macos_cdat-v80-nox_py3
           destination: macos_cdat-v80-nox_py3
      - store_artifacts:
           path: macos_cdat-v80_py2
           destination: macos_cdat-v80_py2
      - store_artifacts:
           path: macos_cdat-v80_py3
           destination: macos_cdat-v80_py3
      - store_artifacts:
           path: linux_cdat-v80-nox_py2
           destination: linux_cdat-v80-nox_py2
      - store_artifacts:
           path: linux_cdat-v80-nox_py3
           destination: linux_cdat-v80-nox_py3
      - store_artifacts:
           path: linux_cdat-v80_py2
           destination: linux_cdat-v80_py2
      - store_artifacts:
           path: linux_cdat-v80_py3
           destination: linux_cdat-v80_py3


workflows:
  version: 2
  nightly:
    triggers:
      - schedule:
          cron: "0 4 * * *"
          filters:
            branches:
              only: validateNightly
    jobs:
      - get_time_stamp
      - macos_py2_miniconda:
          requires:
            - get_time_stamp
      - macos_py3_miniconda:
          requires:
            - get_time_stamp
      - linux_py2_miniconda:
          requires:
            - get_time_stamp
      - linux_py3_miniconda:
          requires:
            - get_time_stamp
      #- centos_py2_miniconda:
      #    requires:
      #      - get_time_stamp
      #- centos_py3_miniconda:
      #    requires:
      #      - get_time_stamp
      #- centos_nightly_py2:
      #    requires:
      #      - centos_py2_miniconda
      #- centos_nightly_py3:
      #    requires:
      #      - centos_py3_miniconda
   
      - macos_nightly_py2:
          requires:
            - macos_py2_miniconda
      - macos_nightly_py3:
          requires:
            - macos_py3_miniconda
      - macos_cdat_v80_latest_channel_py2:
          requires:
            - macos_nightly_py2
      - macos_cdat_v80_latest_channel_py3:
          requires:
            - macos_nightly_py3
      - macos_cdat-v80-nox_py2:
          requires:
            - macos_py2_miniconda
      - macos_cdat-v80-nox_py3:
          requires:
            - macos_py3_miniconda
      - macos_cdat-v80_py2:
          requires:
            - macos_py2_miniconda
      - macos_cdat-v80_py3:
          requires:
            - macos_py3_miniconda
      - linux_nightly_py2:      
          requires:
            - linux_py2_miniconda
      - linux_nightly_py3:
          requires:
            - linux_py3_miniconda

      - linux_cdat_v80_latest_channel_py2:
          requires:
            - linux_nightly_py2
      - linux_cdat_v80_latest_channel_py3:
          requires:
            - linux_nightly_py3
      - linux_cdat-v80-nox_py2:
          requires:
            - linux_py2_miniconda
      - linux_cdat-v80-nox_py3:
          requires:
            - linux_py3_miniconda
      - linux_cdat-v80_py2:
          requires:
            - linux_py2_miniconda
      - linux_cdat-v80_py3:
          requires:
            - linux_py3_miniconda
      - collect_nightlies_test_results:
          requires:
            #- centos_nightly_py2
            #- centos_nightly_py3
            - macos_nightly_py2
            - macos_nightly_py3
            - linux_nightly_py2
            - linux_nightly_py3
      - collect_channels_test_results:
          requires:
            - macos_cdat_v80_latest_channel_py2
            - linux_cdat_v80_latest_channel_py2
            - macos_cdat_v80_latest_channel_py3
            - linux_cdat_v80_latest_channel_py3
      - collect_yamls_test_results:
          requires:
            - macos_cdat-v80-nox_py2
            - macos_cdat-v80-nox_py3
            - macos_cdat-v80_py2
            - macos_cdat-v80_py3
            - linux_cdat-v80-nox_py2
            - linux_cdat-v80-nox_py3
            - linux_cdat-v80_py2
            - linux_cdat-v80_py3
