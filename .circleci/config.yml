version: 2.1

aliases:
  - &setup_envPREV
    name: setup_env
    command: |
       if [[ `uname` == "Darwin" ]]; then
          echo 'export WORKDIR=/Users/distiller/project/workdir/macos' >> $BASH_ENV
       else
          echo 'export WORKDIR=/home/circleci/project/workdir/linux' >> $BASH_ENV
       fi
       source $BASH_ENV
       mkdir -p $WORKDIR

  - &setup_env
    name: setup_env
    command: |
       if [[ `uname` == "Darwin" ]]; then
          echo 'export WORKDIR=/Users/distiller/project/workdir/macos/$PY_VER/$LIBNETCDF' >> $BASH_ENV
       else
          echo 'export WORKDIR=/home/circleci/project/workdir/linux/$PY_VER/$LIBNETCDF' >> $BASH_ENV
       fi
       source $BASH_ENV
       mkdir -p $WORKDIR

  - &setup_miniconda
    name: setup_miniconda
    command: |
       source $BASH_ENV
       git clone https://github.com/CDAT/cdat.git $WORKDIR/cdat
       # install_miniconda.py installs miniconda3 under $WORKDIR/miniconda
       python $WORKDIR/cdat/scripts/install_miniconda.py -w $WORKDIR -p 'py3'

  - &create_env
    name: create_env
    command: |
       source $BASH_ENV
       source $WORKDIR/miniconda/etc/profile.d/conda.sh
       echo "make create-env workdir=$WORKDIR env_name=$ENV_NAME channels=$CHANNELS py_ver=$PY_VER extra_pkgs=\"libnetcdf=*=${LIBNETCDF}_*\" pkgs=$PKGS"
       make create-env workdir=$WORKDIR env_name=$ENV_NAME channels="$CHANNELS" py_ver=$PY_VER extra_pkgs="libnetcdf=*=${LIBNETCDF}_*" pkgs="$PKGS"

  - &run_tests
    name: run_tests
    command: |
       source $BASH_ENV
       source $WORKDIR/miniconda/etc/profile.d/conda.sh
       os=`uname`
       dir=$PWD/artifacts/$os-$PY_VER-$LIBNETCDF-$REPO_NAME
       mkdir -p $dir
       make get-repo workdir=$WORKDIR repo_name=$REPO_NAME
       if [[ $REPO_NAME == "cdms" ]]; then
          make run-tests workdir=$WORKDIR env_name=$ENV_NAME repo_name=$REPO_NAME artifact_dir=$dir run_tests_opts="-H -v2 -n 1"
       elif [[ $REPO_NAME == "vcs" ]]; then
          make run-tests workdir=$WORKDIR env_name=$ENV_NAME repo_name=$REPO_NAME artifact_dir=$dir run_tests_opts="-n 4 -H -v2 --timeout=100000 --checkout-baseline --no-vtk-ui"
       elif [[ $REPO_NAME == "dv3d" ]] || [[ $REPO_NAME == "wk" ]]; then
          make get-testdata workdir=$WORKDIR repo_name=$REPO_NAME
          ls -l $WORKDIR/$REPO_NAME
          make run-tests workdir=$WORKDIR env_name=$ENV_NAME repo_name=$REPO_NAME artifact_dir=$dir run_tests_opts="-H -v2"
       else
          make run-tests workdir=$WORKDIR env_name=$ENV_NAME repo_name=$REPO_NAME artifact_dir=$dir run_tests_opts="-H -v2"
       fi
    no_output_timeout: 30m

  - &run_pmp_tests
    name: run_pmp_tests
    command: |
       source $BASH_ENV
       source $WORKDIR/miniconda/etc/profile.d/conda.sh
       make get-repo workdir=$WORKDIR repo_name=pcmdi_metrics organization=pcmdi
       make run-tests workdir=$WORKDIR env_name=$ENV_NAME repo_name=pcmdi_metrics run_tests_opts="-H -v2" 

commands:
   run_repo_tests:
      description: "Run project test cases"
      parameters:
         repo_name:
            type: string
            default: cdms
      steps:
         - run: echo "export REPO_NAME="<< parameters.repo_name >> >> $BASH_ENV
         - run: *run_tests

executors:
   linux:
      machine:
         image: circleci/classic:latest
   macos:
      macos:
         xcode: "11.4.0"

jobs:
   nightly_env:
      parameters:
         os:
            type: executor
         py_ver: 
            type: string
         libnetcdf:
            type: string
      executor: << parameters.os >>
      environment:
         ENV_NAME: nightly
         CHANNELS: "cdat/label/nightly conda-forge"
         PKGS: "cdat_info cdtime cdms2 genutil cdutil dv3d vcs wk vcsaddons"
         PY_VER: << parameters.py_ver >>
         LIBNETCDF: << parameters.libnetcdf >>
      steps:
         - checkout
         - run: *setup_env
         - run: *setup_miniconda
         - run: *create_env
#         - run: *run_pmp_tests
         - run_repo_tests:
              repo_name: "cdtime"
         - run_repo_tests:
              repo_name: "cdms"
         - run_repo_tests:
              repo_name: "genutil"
         - run_repo_tests:
              repo_name: "cdutil"
         - run_repo_tests:
              repo_name: "dv3d"
         - run_repo_tests:
              repo_name: "vcs"
         - run_repo_tests:
              repo_name: "wk"
         - run_repo_tests:
              repo_name: "vcsaddons"
         - store_artifacts:
              path: artifacts
              destination: artifacts
         - persist_to_workspace:
              root: .
              paths: 
                 - artifacts

   release_env:
      parameters:
         os:
            type: executor
         py_ver: 
            type: string
         libnetcdf:
            type: string
      executor: << parameters.os >>
      environment:
         ENV_NAME: cdat_8.2.1
         CHANNELS: "conda-forge cdat/label/v8.2.1"
         PKGS: "cdat"
         PY_VER: << parameters.py_ver >>
         LIBNETCDF: << parameters.libnetcdf >>
      steps:
         - checkout
         - run: *setup_env
         - run: *setup_miniconda
         - run: *create_env
#         - run: *run_pmp_tests
         - run_repo_tests:
              repo_name: "cdtime"
         - run_repo_tests:
              repo_name: "cdms"
         - run_repo_tests:
              repo_name: "genutil"
         - run_repo_tests:
              repo_name: "cdutil"
         - run_repo_tests:
              repo_name: "dv3d"
         - run_repo_tests:
              repo_name: "vcs"
         - run_repo_tests:
              repo_name: "wk"
         - run_repo_tests:
              repo_name: "vcsaddons"
         - store_artifacts:
              path: artifacts
              destination: artifacts
         - persist_to_workspace:
              root: .
              paths: 
                 - artifacts

   collect_artifacts:
      parameters:
         os:
            type: executor
      executor: << parameters.os >>
      steps:
         - attach_workspace:
              at: .
         - run: ls -l artifacts
         - store_artifacts:
              path: artifacts
              destination: artifacts

workflows:
   nightly_regression_tests:
      triggers:
         - schedule:
              cron: "48 21 * * *"
              filters:
                 branches:
                    only:
                      - master
                      - add_nightly_and_release_workflows
      jobs:
         - nightly_env:
              matrix:
                 parameters:
                    os: [ linux, macos ]
                    py_ver: [ "3.6", "3.7", "3.8" ]
                    libnetcdf: [ "nompi", "mpi_openmpi" ]
                    # libnetcdf: [ "nompi", "mpi_openmpi", "mpi_mpich" ]
              name: nightly-<< matrix.os >>-<< matrix.py_ver >>-<< matrix.libnetcdf >>

         - collect_artifacts:
              matrix:
                 parameters:
                    os: [ linux, macos ]
              name: artifacts-<< matrix.os >>
              requires:
                 - nightly-<< matrix.os >>-3.6-nompi
                 - nightly-<< matrix.os >>-3.7-nompi
                 - nightly-<< matrix.os >>-3.8-nompi
                 - nightly-<< matrix.os >>-3.6-mpi_openmpi
                 - nightly-<< matrix.os >>-3.7-mpi_openmpi
                 - nightly-<< matrix.os >>-3.8-mpi_openmpi

   release_regression_tests:
      triggers:
         - schedule:
              cron: "43 21 * * *"
              filters:
                 branches:
                    only:
                      - master
                      - add_nightly_and_release_workflows
      jobs:
         - release_env:
              matrix:
                 parameters:
                    os: [ linux, macos ]
                    py_ver: [ "3.6", "3.7", "3.8" ]
                    libnetcdf: [ "nompi", "mpi_openmpi" ]
                    # libnetcdf: [ "nompi", "mpi_openmpi", "mpi_mpich" ]
              name: release-<< matrix.os >>-<< matrix.py_ver >>-<< matrix.libnetcdf >>

         - collect_artifacts:
              matrix:
                 parameters:
                    os: [ linux, macos ]
              name: artifacts-<< matrix.os >>
              requires:
                 - release-<< matrix.os >>-3.6-nompi
                 - release-<< matrix.os >>-3.7-nompi
                 - release-<< matrix.os >>-3.8-nompi
                 - release-<< matrix.os >>-3.6-mpi_openmpi
                 - release-<< matrix.os >>-3.7-mpi_openmpi
                 - release-<< matrix.os >>-3.8-mpi_openmpi
