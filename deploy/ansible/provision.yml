---
- hosts: all
  vars:
    build_root: /opt
    uvcdat_install_dir: /opt/uvcdat_install
    test_output_file: ~/out.nc
    test_input_files: /opt/uvcdat_install/share/uvcmetrics/test_data/cam_output/*.nc

  tasks:
    - name: Update apt cache
      apt: update_cache=yes
      sudo: yes

    - name: add nodejs ppa
      apt_repository: repo='ppa:chris-lea/node.js'
      sudo: yes

    - name: Install system packages
      apt: name={{ item }} state=present
      sudo: yes
      with_items:
        - git
        - gfortran
        - g++
        - libffi-dev
        - libsqlite-dev
        - libssl-dev
        - libbz2-dev
        - libexpat-dev
        - ncurses-dev
        - curl
        - make
        - wget
        - libjpeg-dev
        - libpng-dev
        - m4
        - cmake
        - python-pip
        - python2.7-dev
        - build-essential
        - mongodb
        - python-software-properties
        - nodejs

    - name: Clone UVCDAT source repo
      git:
          repo: git://github.com/UV-CDAT/uvcdat.git
          dest: "{{build_root}}/uvcdat"
          accept_hostkey: yes
          version: master
          force: yes
      sudo: yes

    - name: Point to "devel" branch of uvcmetrics subproject
      lineinfile:
          dest: "{{build_root}}/uvcdat/CMake/cdat_modules/uvcmetrics_pkg.cmake"
          state: present
          regexp: 'set\(UVCMETRICS_BRANCH'
          line: 'set(UVCMETRICS_BRANCH devel)'
      sudo: yes

    - name: Create build directory if it does not exist
      file: path={{build_root}}/uvcdat-build state=directory mode=0775
      sudo: yes

    - name: Configure UVCDAT
      command: cmake -DCDAT_BUILD_WEB=ON -DCDAT_BUILD_GUI=OFF -DCDAT_BUILD_OSMESA=ON -DCDAT_BUILD_OFFSCREEN=ON -DCMAKE_INSTALL_PREFIX={{uvcdat_install_dir}} -DCDAT_DOWNLOAD_UVCMETRICS_TESTDATA=ON {{build_root}}/uvcdat chdir={{build_root}}/uvcdat-build
      sudo: yes

    - name: Build UVCDAT
      command: make -j3 chdir={{build_root}}/uvcdat-build
      sudo: yes

    - name: Create script for running climatology2.py example
      template: src=run_climatology_example.sh.j2 dest={{uvcdat_install_dir}}/run_climatology_example.sh mode=0775
      sudo: yes

    - name: Clone girder source repo
      git:
          repo: git://github.com/girder/girder
          dest: "{{build_root}}/girder"
          accept_hostkey: yes
          version: master
          force: yes
      sudo: yes

    - name: Clone romanesco
      git:
          repo: git://github.com/Kitware/romanesco
          dest: "{{build_root}}/girder/plugins/romanesco"
          accept_hostkey: yes
          version: master
          force: yes
      sudo: yes

    - name: Clone climos_test plugin
      git:
          repo: git://github.com/zachmullen/climos_test
          dest: "{{build_root}}/girder/plugins/climos_test"
          accept_hostkey: yes
          version: master
          force: yes
      sudo: yes

    - name: Install girder requirements
      pip: requirements="{{build_root}}/girder/requirements.txt"
      sudo: yes

    - name: Install grunt-cli
      npm: name=grunt-cli global=yes
      sudo: yes

    - name: Run npm install on girder
      npm: path="{{build_root}}/girder"
      sudo: yes

    - name: run grunt init
      command: grunt init chdir="{{build_root}}/girder"
      sudo: yes

    - name: run grunt
      command: grunt chdir="{{build_root}}/girder"
      sudo: yes

    - name: install girder for development
      command: python setup.py develop chdir="{{build_root}}/girder"
      sudo: yes

    - name: create romanesco worker.local.cfg
      copy: src=worker.local.cfg dest={{build_root}}/girder/plugins/romanesco/romanesco/worker.local.cfg
      sudo: yes

    - name: Install romanesco requirements
      pip: requirements={{ item }}
      sudo: yes
      with_items:
          - "{{build_root}}/girder/plugins/romanesco/requirements.txt"
          - "{{build_root}}/girder/plugins/romanesco/romanesco/plugins/girder_io/requirements.txt"
