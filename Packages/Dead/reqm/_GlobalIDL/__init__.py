""" Module: 

Automagically generated by:-

The ORB called Fnorb v1.1.Return.of.Fnorb

"""

_FNORB_ID = ""

# Fnorb modules.
import Fnorb.orb.CORBA
import Fnorb.orb.TypeManager
import Fnorb.orb.Util

class reqException(Fnorb.orb.CORBA.UserException):
    """ Exception: IDL:reqException:1.0 """

    _FNORB_ID = "IDL:reqException:1.0"

    def __init__(self, _why):
        """ Constructor. """

        self.why = _why
        return

    def __getinitargs__(self):
        """ Return the constructor arguments for unpickling. """

        return (self.why,)

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:reqException:1.0", "010000001600000048000000010000001500000049444C3A726571457863657074696F6E3A312E30000000000D000000726571457863657074696F6E000000000100000004000000776879001200000000000000", reqException)

# Enum: IDL:REQ_STATE_T:1.0
REQ_INVALD = Fnorb.orb.Util.EnumMember("REQ_INVALD", 0)
REQ_ACCEPTED = Fnorb.orb.Util.EnumMember("REQ_ACCEPTED", 1)
REQ_COMPLETED = Fnorb.orb.Util.EnumMember("REQ_COMPLETED", 2)
REQ_STATE_T = Fnorb.orb.Util.Enum("IDL:REQ_STATE_T:1.0", [REQ_INVALD, REQ_ACCEPTED, REQ_COMPLETED])

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:REQ_STATE_T:1.0", "010000001100000066000000010000001400000049444C3A5245515F53544154455F543A312E30000C0000005245515F53544154455F5400030000000B0000005245515F494E56414C4400000D0000005245515F4143434550544544000000000E0000005245515F434F4D504C4554454400", REQ_STATE_T)

# Alias: IDL:STRSEQ_T:1.0
Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:STRSEQ_T:1.0", "01000000130000001000000001000000120000000000000000000000", None)

class TUPLE:
    """ Struct: IDL:TUPLE:1.0 """

    _FNORB_ID = "IDL:TUPLE:1.0"

    def __init__(self, _lower, _upper, _stride):
        """ Constructor. """

        self.lower = _lower
        self.upper = _upper
        self.stride = _stride
        return

    def __getinitargs__(self):
        """ Return the constructor arguments for unpickling. """

        return (self.lower, self.upper, self.stride)

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:TUPLE:1.0", "010000000F00000058000000010000000E00000049444C3A5455504C453A312E30000000060000005455504C4500000003000000060000006C6F776572000000030000000600000075707065720000000300000007000000737472696465000003000000", TUPLE)

# Alias: IDL:TUPLE_T:1.0
Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:TUPLE_T:1.0", "010000000F00000058000000010000000E00000049444C3A5455504C453A312E30000000060000005455504C4500000003000000060000006C6F776572000000030000000600000075707065720000000300000007000000737472696465000003000000", None)

# Alias: IDL:TUPLES_T:1.0
Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:TUPLES_T:1.0", "010000001300000094000000010000001500000084000000010000001000000049444C3A5455504C455F543A312E3000080000005455504C455F54000F00000058000000010000000E00000049444C3A5455504C453A312E30000000060000005455504C4500000003000000060000006C6F77657200000003000000060000007570706572000000030000000700000073747269646500000300000000000000", None)

class FILE_LOCATION:
    """ Struct: IDL:FILE_LOCATION:1.0 """

    _FNORB_ID = "IDL:FILE_LOCATION:1.0"

    def __init__(self, _dataset_name, _relative_path):
        """ Constructor. """

        self.dataset_name = _dataset_name
        self.relative_path = _relative_path
        return

    def __getinitargs__(self):
        """ Return the constructor arguments for unpickling. """

        return (self.dataset_name, self.relative_path)

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:FILE_LOCATION:1.0", "010000000F00000070000000010000001600000049444C3A46494C455F4C4F434154494F4E3A312E300000000E00000046494C455F4C4F434154494F4E000000020000000D000000646174617365745F6E616D650000000012000000000000000E00000072656C61746976655F706174680000001200000000000000", FILE_LOCATION)

# Alias: IDL:FILE_LOCATION_T:1.0
Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:FILE_LOCATION_T:1.0", "010000000F00000070000000010000001600000049444C3A46494C455F4C4F434154494F4E3A312E300000000E00000046494C455F4C4F434154494F4E000000020000000D000000646174617365745F6E616D650000000012000000000000000E00000072656C61746976655F706174680000001200000000000000", None)

class SLABSPEC:
    """ Struct: IDL:SLABSPEC:1.0 """

    _FNORB_ID = "IDL:SLABSPEC:1.0"

    def __init__(self, _variable, _data_type, _selection_spec):
        """ Constructor. """

        self.variable = _variable
        self.data_type = _data_type
        self.selection_spec = _selection_spec
        return

    def __getinitargs__(self):
        """ Return the constructor arguments for unpickling. """

        return (self.variable, self.data_type, self.selection_spec)

Fnorb.orb.TypeManager.TypeManager_init().add_type

# Alias: IDL:SLABSPEC_T:1.0
Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:SLABSPEC_T:1.0", "010000000F00000044010000010000001100000049444C3A534C4142535045433A312E300000000009000000534C4142535045430000000003000000090000007661726961626C650000000012000000000000000A000000646174615F7479706500000012000000000000000F00000073656C656374696F6E5F73706563000015000000C8000000010000001100000049444C3A5455504C45535F543A312E3000000000090000005455504C45535F54000000001300000094000000010000001500000084000000010000001000000049444C3A5455504C455F543A312E3000080000005455504C455F54000F00000058000000010000000E00000049444C3A5455504C453A312E30000000060000005455504C4500000003000000060000006C6F77657200000003000000060000007570706572000000030000000700000073747269646500000300000000000000", None)

# Alias: IDL:SLABSPECS_T:1.0
Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:SLABSPECS_T:1.0", "010000001300000088010000010000001500000078010000010000001300000049444C3A534C4142535045435F543A312E3000000B000000534C4142535045435F5400000F00000044010000010000001100000049444C3A534C4142535045433A312E300000000009000000534C4142535045430000000003000000090000007661726961626C650000000012000000000000000A000000646174615F7479706500000012000000000000000F00000073656C656374696F6E5F73706563000015000000C8000000010000001100000049444C3A5455504C45535F543A312E3000000000090000005455504C45535F54000000001300000094000000010000001500000084000000010000001000000049444C3A5455504C455F543A312E3000080000005455504C455F54000F00000058000000010000000E00000049444C3A5455504C453A312E30000000060000005455504C4500000003000000060000006C6F7765720000000300000006000000757070657200000003000000070000007374726964650000030000000000000000000000", None)

class REQUEST:
    """ Struct: IDL:REQUEST:1.0 """

    _FNORB_ID = "IDL:REQUEST:1.0"

    def __init__(self, _source, _target, _slabspecs, _search_replicas):
        """ Constructor. """

        self.source = _source
        self.target = _target
        self.slabspecs = _slabspecs
        self.search_replicas = _search_replicas
        return

    def __getinitargs__(self):
        """ Return the constructor arguments for unpickling. """

        return (self.source, self.target, self.slabspecs, self.search_replicas)

Fnorb.orb.TypeManager.TypeManager_init().add_type

# Alias: IDL:REQUEST_T:1.0
Fnorb.orb.TypeManager.TypeManager_init().add_typeone)

# Alias: IDL:REQUESTS_T:1.0
Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:REQUESTS_T:1.0", "0100000013000000D80300000100000015000000C8030000010000001200000049444C3A524551554553545F543A312E300000000A000000524551554553545F540000000F00000094030000010000001000000049444C3A524551554553543A312E30000800000052455155455354000400000007000000736F75726365000015000000AC000000010000001800000049444C3A46494C455F4C4F434154494F4E5F543A312E30001000000046494C455F4C4F434154494F4E5F54000F00000070000000010000001600000049444C3A46494C455F4C4F434154494F4E3A312E300000000E00000046494C455F4C4F434154494F4E000000020000000D000000646174617365745F6E616D650000000012000000000000000E00000072656C61746976655F70617468000000120000000000000007000000746172676574000015000000AC000000010000001800000049444C3A46494C455F4C4F434154494F4E5F543A312E30001000000046494C455F4C4F434154494F4E5F54000F00000070000000010000001600000049444C3A46494C455F4C4F434154494F4E3A312E300000000E00000046494C455F4C4F434154494F4E000000020000000D000000646174617365745F6E616D650000000012000000000000000E00000072656C61746976655F7061746800000012000000000000000A000000736C6162737065637300000015000000BC010000010000001400000049444C3A534C414253504543535F543A312E30000C000000534C414253504543535F54001300000088010000010000001500000078010000010000001300000049444C3A534C4142535045435F543A312E3000000B000000534C4142535045435F5400000F00000044010000010000001100000049444C3A534C4142535045433A312E300000000009000000534C4142535045430000000003000000090000007661726961626C650000000012000000000000000A000000646174615F7479706500000012000000000000000F00000073656C656374696F6E5F73706563000015000000C8000000010000001100000049444C3A5455504C45535F543A312E3000000000090000005455504C45535F54000000001300000094000000010000001500000084000000010000001000000049444C3A5455504C455F543A312E3000080000005455504C455F54000F00000058000000010000000E00000049444C3A5455504C453A312E30000000060000005455504C4500000003000000060000006C6F7765720000000300000006000000757070657200000003000000070000007374726964650000030000000000000000000000100000007365617263685F7265706C69636173000800000000000000", None)

class FILE_STATUS:
    """ Struct: IDL:FILE_STATUS:1.0 """

    _FNORB_ID = "IDL:FILE_STATUS:1.0"

    def __init__(self, _target, _size):
        """ Constructor. """

        self.target = _target
        self.size = _size
        return

    def __getinitargs__(self):
        """ Return the constructor arguments for unpickling. """

        return (self.target, self.size)

Fnorb.orb.TypeManager.TypeManager_init().add_type

# Alias: IDL:FILE_STATUS_T:1.0
Fnorb.orb.TypeManager.TypeManager_init().add_typeone)

# Alias: IDL:FILES_STATUS_T:1.0
Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:FILES_STATUS_T:1.0", "01000000130000004C01000001000000150000003C010000010000001600000049444C3A46494C455F5354415455535F543A312E300000000E00000046494C455F5354415455535F540000000F00000000010000010000001400000049444C3A46494C455F5354415455533A312E30000C00000046494C455F535441545553000200000007000000746172676574000015000000AC000000010000001800000049444C3A46494C455F4C4F434154494F4E5F543A312E30001000000046494C455F4C4F434154494F4E5F54000F00000070000000010000001600000049444C3A46494C455F4C4F434154494F4E3A312E300000000E00000046494C455F4C4F434154494F4E000000020000000D000000646174617365745F6E616D650000000012000000000000000E00000072656C61746976655F7061746800000012000000000000000500000073697A65000000000700000000000000", None)

# Alias: IDL:REQ_TOKEN_T:1.0
Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:REQ_TOKEN_T:1.0", "010000001200000010000000", None)

# Alias: IDL:USER_ID_T:1.0
Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:USER_ID_T:1.0", "010000001200000000000000", None)

class RequestManager(Fnorb.orb.CORBA.Object):
    """ Interface: IDL:RequestManager:1.0 """

    _FNORB_ID = "IDL:RequestManager:1.0"

    def request(self, *args, **kw):
        """ Operation: IDL:RequestManager/request:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:USER_ID_T:1.0"))
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:REQUESTS_T:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_boolean)
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:REQ_TOKEN_T:1.0"))

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:reqException:1.0"))

        # Create a request object.
        request = self._create_request("request", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def estimate(self, *args, **kw):
        """ Operation: IDL:RequestManager/estimate:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:REQ_TOKEN_T:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_double)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:reqException:1.0"))

        # Create a request object.
        request = self._create_request("estimate", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def execute(self, *args, **kw):
        """ Operation: IDL:RequestManager/execute:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:REQ_TOKEN_T:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_boolean)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:reqException:1.0"))

        # Create a request object.
        request = self._create_request("execute", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def status(self, *args, **kw):
        """ Operation: IDL:RequestManager/status:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:REQ_TOKEN_T:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.typecode("IDL:FILES_STATUS_T:1.0"))

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:reqException:1.0"))

        # Create a request object.
        request = self._create_request("status", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def cancel(self, *args, **kw):
        """ Operation: IDL:RequestManager/cancel:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.typecode("IDL:REQ_TOKEN_T:1.0"))

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_boolean)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:reqException:1.0"))

        # Create a request object.
        request = self._create_request("cancel", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def staged(self, *args, **kw):
        """ Operation: IDL:RequestManager/staged:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_string)
        inputs.append(Fnorb.orb.CORBA.TC_string)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_boolean)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:reqException:1.0"))

        # Create a request object.
        request = self._create_request("staged", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

    def stageFailed(self, *args, **kw):
        """ Operation: IDL:RequestManager/stageFailed:1.0 """

        # Typecodes for 'in' and 'inout' parameters.
        inputs = []
        inputs.append(Fnorb.orb.CORBA.TC_string)
        inputs.append(Fnorb.orb.CORBA.TC_string)

        # Typecodes for the result, 'inout' and 'out' parameters.
        outputs = []
        outputs.append(Fnorb.orb.CORBA.TC_boolean)

        # Typecodes for user exceptions.
        exceptions = []
        exceptions.append(Fnorb.orb.CORBA.typecode("IDL:reqException:1.0"))

        # Create a request object.
        request = self._create_request("stageFailed", inputs, outputs, exceptions)

        # Make the request!
        apply(request.invoke, args, kw)

        # Return the results.
        return request.results()

Fnorb.orb.TypeManager.TypeManager_init().add_type("IDL:RequestManager:1.0", "010000000E00000033000000010000001700000049444C3A526571756573744D616E616765723A312E3000000F000000526571756573744D616E6167657200", RequestManager)

#############################################################################
