ButtonBarWidget.py:        self.buttonWidget = vtk.vtkButtonWidget()
ButtonBarWidget.py:        JPEGReader = vtk.vtkJPEGReader()
ButtonBarWidget.py:        self.buttonRepresentation = vtk.vtkTexturedButtonRepresentation2D()
ButtonBarWidget.py:        self.vtk_coord = vtk.vtkCoordinate()
ButtonBarWidget.py:        sliderRep = vtk.vtkSliderRepresentation2D()
ButtonBarWidget.py:        sliderWidget = vtk.vtkSliderWidget()
ButtonBarWidget.py:    ren = vtk.vtkRenderer()
ButtonBarWidget.py:    renWin = vtk.vtkRenderWindow()
ButtonBarWidget.py:    iren = vtk.vtkRenderWindowInteractor()
ColorMapManager.py:        self.display_lut = vtk.vtkLookupTable()
ColorMapManager.py:            self.colorBarActor = vtk.vtkScalarBarActor()
ColorMapManager.py:            labelFormat = vtk.vtkTextProperty()
ColorMapManager.py:            titleFormat = vtk.vtkTextProperty()
ConfigurationFunctions.py:        return vtk.vtkUnsignedShortArray()
ConfigurationFunctions.py:        return vtk.vtkUnsignedCharArray()
ConfigurationFunctions.py:        return vtk.vtkFloatArray()
ConfigurationFunctions.py:        return vtk.vtkDoubleArray()
ConfigurationFunctions.py:    array = vtk.vtkStringArray()
ConfigurationFunctions.py:        self.clipper = vtk.vtkImageClip()
ConfigurationFunctions.py:            self.fieldData = vtk.vtkDataSetAttributes()
DV3DPlot.py:        textActor = vtk.vtkTextActor()
DV3DPlot.py:        self.pointPicker = vtk.vtkPointPicker()
DV3DPlot.py:        self.clipper = vtk.vtkBoxWidget()
DV3DPlot.py:            renWin = vtk.vtkRenderWindow()
DV3DPlot.py:        self.renderer = vtk.vtkRenderer()
DV3DPlot.py:        self.interactorStyle = vtk.vtkInteractorStyleTrackballCamera( )
DV3DPlot.py:            lut = vtk.vtkLookupTable()
DistributedPointCollections.py:from vtk.util import numpy_support
DistributedPointCollections.py:    shperical_to_xyz_trans = vtk.vtkSphericalTransform()
DistributedPointCollections.py:        self.mapper = vtk.vtkPolyDataMapper()
DistributedPointCollections.py:        self.actor = vtk.vtkActor()
DistributedPointCollections.py:        self.vertices = vtk.vtkCellArray()
DistributedPointCollections.py:        self.vtk_planar_points = vtk.vtkPoints()
DistributedPointCollections.py:                vtk_sp_grid_points = vtk.vtkPoints()
DistributedPointCollections.py:                self.vtk_spherical_points = vtk.vtkPoints()
DistributedPointCollections.py:            self.polydata = vtk.vtkPolyData()
DistributedPointCollections.py:        vtk_sp_grid_points = vtk.vtkPoints()
DistributedPointCollections.py:        self.vtk_spherical_points = vtk.vtkPoints()
DistributedPointCollections.py:        lut = vtk.vtkLookupTable()
ImagePlaneWidget.py:        self.CurrentImageValue   = vtk.VTK_DOUBLE_MAX
ImagePlaneWidget.py:        self.ResliceAxes   = vtk.vtkMatrix4x4()
ImagePlaneWidget.py:        self.ResliceAxes2   = vtk.vtkMatrix4x4()
ImagePlaneWidget.py:        self.plane = vtk.vtkPlane()
ImagePlaneWidget.py:        self.PlaneSource  = vtk.vtkPlaneSource()
ImagePlaneWidget.py:        self.PlaneOutlinePolyData  = vtk.vtkPolyData()
ImagePlaneWidget.py:        self.PlaneOutlineActor     = vtk.vtkActor()
ImagePlaneWidget.py:        self.Reslice = vtk.vtkImageReslice()
ImagePlaneWidget.py:        self.Transform     = vtk.vtkTransform()
ImagePlaneWidget.py:        self.CursorPolyData  = vtk.vtkPolyData()
ImagePlaneWidget.py:        self.CursorActor     = vtk.vtkActor()
ImagePlaneWidget.py:        distance = vtk.vtkMath.Dot( v, self.PlaneSource.GetNormal() )
ImagePlaneWidget.py:            self.PlaneProperty  = vtk.vtkProperty()
ImagePlaneWidget.py:            self.SelectedPlaneProperty  = vtk.vtkProperty()
ImagePlaneWidget.py:            self.CursorProperty  = vtk.vtkProperty()
ImagePlaneWidget.py:            self.TexturePlaneProperty  = vtk.vtkProperty()
ImagePlaneWidget.py:            if vtk.VTK_MAJOR_VERSION <= 5:  self.Reslice.SetInput(None)
ImagePlaneWidget.py:        if vtk.VTK_MAJOR_VERSION <= 5:  self.Reslice.SetInput(self.ImageData)
ImagePlaneWidget.py:        planeSizeX  = vtk.vtkMath.Normalize(planeAxis1)
ImagePlaneWidget.py:        planeSizeY  = vtk.vtkMath.Normalize(planeAxis2)
ImagePlaneWidget.py:            self.Reslice2 = vtk.vtkImageReslice()
ImagePlaneWidget.py:            if vtk.VTK_MAJOR_VERSION <= 5:  self.Reslice2.SetInput(self.ImageData2)
ImagePlaneWidget.py:        lut  = vtk.vtkLookupTable()
ImagePlaneWidget.py:            return vtk.vtkMath.Round((planeOrigin[2]-origin[2])/spacing[2])
ImagePlaneWidget.py:        points = vtk.vtkPoints()
ImagePlaneWidget.py:        cells  = vtk.vtkCellArray()
ImagePlaneWidget.py:        ids = vtk.vtkIdList()
ImagePlaneWidget.py:        planeOutlineMapper  = vtk.vtkPolyDataMapper()
ImagePlaneWidget.py:        points  = vtk.vtkPoints()
ImagePlaneWidget.py:        cells  = vtk.vtkCellArray()
ImagePlaneWidget.py:        ids = vtk.vtkIdList()
ImagePlaneWidget.py:        cursorMapper  = vtk.vtkPolyDataMapper()
ImagePlaneWidget.py:            self.Texture = vtk.vtkTexture()
ImagePlaneWidget.py:            self.TexturePlaneActor   = vtk.vtkActor()
ImagePlaneWidget.py:            texturePlaneMapper  = vtk.vtkPolyDataMapper()
ImagePlaneWidget.py:            if vtk.VTK_MAJOR_VERSION <= 5:  texturePlaneMapper.SetInput( self.PlaneSource.GetOutput() )
ImagePlaneWidget.py:            self.ColorMap = vtk.vtkImageMapToColors()
ImagePlaneWidget.py:                self.PlanePicker  = vtk.vtkCellPicker()
ImagePlaneWidget.py:            self.streamer = vtk.vtkStreamLine()
ImagePlaneWidget.py:            self.streamActor = vtk.vtkActor()
ImagePlaneWidget.py:            self.streamMapper = vtk.vtkPolyDataMapper()
ImagePlaneWidget.py:        sample_source = vtk.vtkImageData()
ImagePlaneWidget.py:            self.resample = vtk.vtkExtractVOI()
ImagePlaneWidget.py:            self.cutter = vtk.vtkCutter()
ImagePlaneWidget.py:            self.glyphMapper = vtk.vtkGlyph3DMapper()
ImagePlaneWidget.py:            self.glyphActor = vtk.vtkActor()
ImagePlaneWidget.py:        trans = vtk.vtkTransform()
ImagePlaneWidget.py:        arrowSource = vtk.vtkArrowSource()
ImagePlaneWidget.py:            newPts = vtk.vtkPoints()
ImagePlaneWidget.py:            scaledArrow = vtk.vtkPolyData()
ImagePlaneWidget.py:            if vtk.VTK_MAJOR_VERSION <= 5:  self.glyphMapper.SetSource( iScale, scaledArrow )
ImagePlaneWidget.py:            self.resample = vtk.vtkExtractVOI()
ImagePlaneWidget.py:            self.cutter = vtk.vtkCutter()
ImagePlaneWidget.py:            self.LICFilter = vtk.vtkImageDataLIC2D()
ListWidget.py:        buttonWidget = vtk.vtkButtonWidget()
ListWidget.py:        upperRight = vtk.vtkCoordinate()
ListWidget.py:        self.lut = vtk.vtkLookupTable()
ListWidget.py:        buttonRepresentation = vtk.vtkTexturedButtonRepresentation2D()
ListWidget.py:        image = vtk.vtkImageData()
ListWidget.py:        vtkdata = vtk.vtkUnsignedCharArray()
ListWidget.py:    renderer = vtk.vtkRenderer()
ListWidget.py:    render_window = vtk.vtkRenderWindow()
ListWidget.py:    interactor = vtk.vtkRenderWindowInteractor()
MapManager.py:            self.sphere = vtk.vtkSphereSource()
MapManager.py:            self.sphereTexmapper = vtk.vtkTextureMapToSphere()
MapManager.py:            self.sphereMapper = vtk.vtkPolyDataMapper()
MapManager.py:            imageFlipper = vtk.vtkImageFlip()
MapManager.py:            self.sphereTexture = vtk.vtkTexture()
MapManager.py:            self.sphereActor = vtk.vtkActor()
MapManager.py:            self.imageInfo = vtk.vtkImageChangeInformation()
MapManager.py:            self.image_reader = vtk.vtkJPEGReader()
MapManager.py:            self.baseMapActor = vtk.vtkImageActor()
MapManager.py:        clip0 = vtk.vtkImageClip()
MapManager.py:        clip1 = vtk.vtkImageClip()
MapManager.py:        append = vtk.vtkImageAppend()
MapManager.py:        imageInfo = vtk.vtkImageChangeInformation()
MapManager.py:            clip0 = vtk.vtkImageClip()
MapManager.py:            append = vtk.vtkImageAppend()
MapManager.py:            clip = vtk.vtkImageClip()
PointCloudViewer.py:        self.sphere_source = vtk.vtkSphereSource()
PointCloudViewer.py:        mapper = vtk.vtkPolyDataMapper()
PointCloudViewer.py:        self.sphere_actor = vtk.vtkActor()
PointCloudViewer.py:        earth_source = vtk.vtkEarthSource()
PointCloudViewer.py:        self.earth_mapper = vtk.vtkPolyDataMapper()
PointCloudViewer.py:        if vtk.VTK_MAJOR_VERSION <= 5:  self.earth_mapper.SetInput(earth_polydata)
PointCloudViewer.py:        self.earth_actor = vtk.vtkActor()
RectilinearGridPlot.py:        self.cursorActor     = vtk.vtkActor()
RectilinearGridPlot.py:                    self.clipPlanes = vtk.vtkPlanes()
RectilinearGridPlot.py:        renderMode = vtk.vtkSmartVolumeMapper.TextureRenderMode
RectilinearGridPlot.py:            renderMode = vtk.vtkSmartVolumeMapper.RayCastAndTextureRenderMode
RectilinearGridPlot.py:            renderMode = vtk.vtkSmartVolumeMapper.RayCastRenderMode
RectilinearGridPlot.py:            renderMode = vtk.vtkSmartVolumeMapper.TextureRenderMode
RectilinearGridPlot.py:                self.probeFilter = vtk.vtkProbeFilter()
RectilinearGridPlot.py:            self.probeFilter = vtk.vtkProbeFilter()
RectilinearGridPlot.py:            self.surfacePicker  = vtk.vtkPointPicker()
RectilinearGridPlot.py:        self.levelSetFilter = vtk.vtkContourFilter()
RectilinearGridPlot.py:        self.levelSetMapper = vtk.vtkPolyDataMapper()
RectilinearGridPlot.py:        self.levelSetActor = vtk.vtkLODActor()
RectilinearGridPlot.py:        self.cursor = vtk.vtkSphereSource()
RectilinearGridPlot.py:        mapper = vtk.vtkPolyDataMapper()
RectilinearGridPlot.py:        self.volumeProperty = vtk.vtkVolumeProperty()
RectilinearGridPlot.py:        self.volumeProperty.SetInterpolationType( vtk.VTK_LINEAR_INTERPOLATION )
RectilinearGridPlot.py:        self.volumeMapper = vtk.vtkSmartVolumeMapper()
RectilinearGridPlot.py:        self.volume = vtk.vtkVolume()
RectilinearGridPlot.py:        self.colorTransferFunction = vtk.vtkColorTransferFunction()
RectilinearGridPlot.py:        self.opacityTransferFunction = vtk.vtkPiecewiseFunction()
RectilinearGridPlot.py:        self.sliceOutput = vtk.vtkImageData()
RectilinearGridPlot.py:        picker = vtk.vtkCellPicker()
RectilinearGridPlot.py:            self.contours = vtk.vtkContourFilter()
RectilinearGridPlot.py:            self.contourLineMapperer = vtk.vtkPolyDataMapper()
RectilinearGridPlot.py:        self.volume = vtk.vtkVolume()
RectilinearGridPlot.py:        import vtk.util.vtkImageImportFromArray as vtkUtil
RectilinearGridPlot.py:            contourLineActor = vtk.vtkActor()
Shapefile.py:        points = vtk.vtkPoints()
Shapefile.py:        lines = vtk.vtkCellArray()
Shapefile.py:                    idList=vtk.vtkIdList()
Shapefile.py:                                idList=vtk.vtkIdList()
Shapefile.py:                    idList=vtk.vtkIdList()
Shapefile.py:        polygon = vtk.vtkPolyData()
Shapefile.py:        polygonMapper = vtk.vtkPolyDataMapper()
Shapefile.py:        if vtk.VTK_MAJOR_VERSION <= 5:  polygonMapper.SetInput(polygon)
Shapefile.py:        polygonActor = vtk.vtkActor()
Shapefile.py:        property = vtk.vtkProperty()
StructuredDataset.py:# from vtk.util.misc import vtkGetDataRoot
StructuredGridPlot.py:        if iDType   == vtk.VTK_UNSIGNED_CHAR:   self._max_scalar_value = 255
StructuredGridPlot.py:        elif iDType == vtk.VTK_UNSIGNED_SHORT:  self._max_scalar_value = 256*256-1
StructuredGridPlot.py:        elif iDType == vtk.VTK_SHORT:           self._max_scalar_value = 256*128-1
StructuredGridPlot.py:            resample = vtk.vtkImageShrink3D()
StructuredGridPlot.py:        self.imageInfo = vtk.vtkImageChangeInformation()
StructuredGridPlot.py:        image_reader = vtk.vtkJPEGReader()
StructuredGridPlot.py:        self.baseMapActor = vtk.vtkImageActor()
StructuredGridPlot.py:        if vtk.VTK_MAJOR_VERSION <= 5:  self.baseMapActor.SetInput(baseImage)
StructuredGridPlot.py:        clip0 = vtk.vtkImageClip()
StructuredGridPlot.py:        if vtk.VTK_MAJOR_VERSION <= 5:  clip0.SetInput( baseImage )
StructuredGridPlot.py:        clip1 = vtk.vtkImageClip()
StructuredGridPlot.py:        if vtk.VTK_MAJOR_VERSION <= 5:  clip1.SetInput( baseImage )
StructuredGridPlot.py:        append = vtk.vtkImageAppend()
StructuredGridPlot.py:        imageInfo = vtk.vtkImageChangeInformation()
StructuredGridPlot.py:        imageInfo = vtk.vtkImageChangeInformation()
StructuredGridPlot.py:            clip0 = vtk.vtkImageClip()
StructuredGridPlot.py:            clip1 = vtk.vtkImageClip()
StructuredGridPlot.py:            append = vtk.vtkImageAppend()
StructuredGridPlot.py:            clip = vtk.vtkImageClip()
StructuredVariableReader.py:            self.fieldData = vtk.vtkDataSetAttributes()
StructuredVariableReader.py:            image_data = vtk.vtkImageData()
VolumeViewer.py:        renderMode = vtk.vtkSmartVolumeMapper.TextureRenderMode
VolumeViewer.py:            renderMode = vtk.vtkSmartVolumeMapper.RayCastAndTextureRenderMode
VolumeViewer.py:            renderMode = vtk.vtkSmartVolumeMapper.RayCastRenderMode
VolumeViewer.py:            renderMode = vtk.vtkSmartVolumeMapper.TextureRenderMode
VolumeViewer.py:        self.colorTransferFunction = vtk.vtkColorTransferFunction()
VolumeViewer.py:        self.opacityTransferFunction = vtk.vtkPiecewiseFunction()
VolumeViewer.py:        self.volumeProperty = vtk.vtkVolumeProperty()
VolumeViewer.py:        self.volumeProperty.SetInterpolationType( vtk.VTK_LINEAR_INTERPOLATION )
VolumeViewer.py:        self.volumeMapper = vtk.vtkSmartVolumeMapper()
VolumeViewer.py:        self.clipper = vtk.vtkBoxWidget()
VolumeViewer.py:        self.volume = vtk.vtkVolume()
VolumeViewer.py:        planes = vtk.vtkPlanes(); np = 6
VolumeViewer.py:        self.volume = vtk.vtkVolume()
Canvas.py:        elif isinstance(backend,vtk.vtkRenderWindow):
VTKPlots.py:from vtk.util import numpy_support as VN
VTKPlots.py:class VCSInteractorStyle(vtk.vtkInteractorStyleUser):
VTKPlots.py:    a=vtk.vtkTextActor()
VTKPlots.py:    ren = vtk.vtkRenderer()
VTKPlots.py:      defaultInteractor = vtk.vtkRenderWindowInteractor()
VTKPlots.py:      self.renWin = vtk.vtkRenderWindow()
VTKPlots.py:      ren = vtk.vtkRenderer()
VTKPlots.py:        c2p = vtk.vtkCellDataToPointData()
VTKPlots.py:        cln = vtk.vtkCleanUnstructuredGrid()
VTKPlots.py:    arrow = vtk.vtkArrowSource()
VTKPlots.py:    glyphFilter = vtk.vtkGlyph2D()
VTKPlots.py:    mapper = vtk.vtkPolyDataMapper()
VTKPlots.py:    act = vtk.vtkActor()
VTKPlots.py:    lut = vtk.vtkLookupTable()
VTKPlots.py:    mapper = vtk.vtkPolyDataMapper()
VTKPlots.py:      sFilter = vtk.vtkDataSetSurfaceFilter()
VTKPlots.py:        cot = vtk.vtkContourFilter()
VTKPlots.py:          mapper = vtk.vtkPolyDataMapper()
VTKPlots.py:          cot = vtk.vtkBandedPolyDataContourFilter()
VTKPlots.py:      geoFilter = vtk.vtkGeometryFilter()
VTKPlots.py:          p2c = vtk.vtkPointDataToCellData()
VTKPlots.py:    readerFactory = vtk.vtkImageReader2Factory()
VTKPlots.py:    a = vtk.vtkImageActor()
VTKPlots.py:        imgfiltr = vtk.vtkWindowToImageFilter()
VTKPlots.py:        writer = vtk.vtkPNGWriter()
VTKPlots.py:        writer = vtk.vtkIOCGM.vtkCGMWriter()
vcs2vtk.py:          grid2 = vtk.vtkStructuredGrid()
vcs2vtk.py:    vg = vtk.vtkUnstructuredGrid()
vcs2vtk.py:      lst = vtk.vtkIdList()
vcs2vtk.py:      vg.InsertNextCell(vtk.VTK_QUAD,lst)
vcs2vtk.py:    vg = vtk.vtkStructuredGrid()
vcs2vtk.py:  pts = vtk.vtkPoints()
vcs2vtk.py:  poly =vtk.vtkPolyData()
vcs2vtk.py:  cells = vtk.vtkCellArray()
vcs2vtk.py:    ln = vtk.vtkPolyLine()
vcs2vtk.py:  geo = vtk.vtkGeoTransform()
vcs2vtk.py:  ps = vtk.vtkGeoProjection()
vcs2vtk.py:  dsw = vtk.vtkDataSetWriter()
vcs2vtk.py:  appendFilter =vtk.vtkAppendPolyData()
vcs2vtk.py:      Tpf = vtk.vtkTransformPolyDataFilter()
vcs2vtk.py:      T=vtk.vtkTransform()
vcs2vtk.py:    clpf = vtk.vtkPlane()
vcs2vtk.py:    clp = vtk.vtkClipPolyData()
vcs2vtk.py:  p.SetFontFamily(vtk.VTK_FONT_FILE)
vcs2vtk.py:    polygon = vtk.vtkPolygon()
vcs2vtk.py:    gs = vtk.vtkGlyphSource2D()
vcs2vtk.py:      ds = vtk.vtkDiskSource()
vcs2vtk.py:    l = vtk.vtkLine()
